// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// novelist_est_cpp
Rcpp::List novelist_est_cpp(const arma::mat& resid, double delta, Rcpp::Nullable<double> lambda_in, bool zero_mean);
RcppExport SEXP _ReconCov_novelist_est_cpp(SEXP residSEXP, SEXP deltaSEXP, SEXP lambda_inSEXP, SEXP zero_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type resid(residSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type lambda_in(lambda_inSEXP);
    Rcpp::traits::input_parameter< bool >::type zero_mean(zero_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(novelist_est_cpp(resid, delta, lambda_in, zero_mean));
    return rcpp_result_gen;
END_RCPP
}
// make_PD_cpp
arma::mat make_PD_cpp(const arma::mat& W, double tol);
RcppExport SEXP _ReconCov_make_PD_cpp(SEXP WSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(make_PD_cpp(W, tol));
    return rcpp_result_gen;
END_RCPP
}
// reconcile_mint_cpp
arma::mat reconcile_mint_cpp(const arma::mat& base_forecasts, const arma::mat& S, const arma::mat& W);
RcppExport SEXP _ReconCov_reconcile_mint_cpp(SEXP base_forecastsSEXP, SEXP SSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type base_forecasts(base_forecastsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(reconcile_mint_cpp(base_forecasts, S, W));
    return rcpp_result_gen;
END_RCPP
}
// novelist_cv_cpp
Rcpp::List novelist_cv_cpp(const arma::mat& y, const arma::mat& y_hat, const arma::mat& S, int window_size, const arma::vec& deltas, bool zero_mean, bool ensure_PD, double PD_tol);
RcppExport SEXP _ReconCov_novelist_cv_cpp(SEXP ySEXP, SEXP y_hatSEXP, SEXP SSEXP, SEXP window_sizeSEXP, SEXP deltasSEXP, SEXP zero_meanSEXP, SEXP ensure_PDSEXP, SEXP PD_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_hat(y_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type deltas(deltasSEXP);
    Rcpp::traits::input_parameter< bool >::type zero_mean(zero_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type ensure_PD(ensure_PDSEXP);
    Rcpp::traits::input_parameter< double >::type PD_tol(PD_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(novelist_cv_cpp(y, y_hat, S, window_size, deltas, zero_mean, ensure_PD, PD_tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ReconCov_novelist_est_cpp", (DL_FUNC) &_ReconCov_novelist_est_cpp, 4},
    {"_ReconCov_make_PD_cpp", (DL_FUNC) &_ReconCov_make_PD_cpp, 2},
    {"_ReconCov_reconcile_mint_cpp", (DL_FUNC) &_ReconCov_reconcile_mint_cpp, 3},
    {"_ReconCov_novelist_cv_cpp", (DL_FUNC) &_ReconCov_novelist_cv_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_ReconCov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
